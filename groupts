import { useMemo } from "react";
import moment from "moment";
import { Trip, TripList } from "../types/trip";

interface PaginatedTrips {
  todayTrips: Trip[];
  pastTrips: Trip[];
  totalPages: number;
}

export const usePaginatedTrips = (tripList: TripList, page: number, tripsPerPage: number): PaginatedTrips => {
  return useMemo(() => {
    const today = moment().startOf('day');
    const allTrips = tripList.tripList;

    const allTodayTrips = allTrips.filter(
      (trip) => moment(trip.tripStartDateTime).isSame(today, 'day')
    );
    const allPastTrips = allTrips.filter(
      (trip) => moment(trip.tripStartDateTime).isBefore(today, 'day')
    );

    const startIndex = (page - 1) * tripsPerPage;
    const endIndex = startIndex + tripsPerPage;

    let todayTripsOnPage: Trip[] = [];
    let pastTripsOnPage: Trip[] = [];

    if (startIndex < allTodayTrips.length) {
      todayTripsOnPage = allTodayTrips.slice(
        startIndex,
        Math.min(endIndex, allTodayTrips.length)
      );
      if (todayTripsOnPage.length < tripsPerPage) {
        pastTripsOnPage = allPastTrips.slice(
          0,
          tripsPerPage - todayTripsOnPage.length
        );
      }
    } else {
      const pastStartIndex = startIndex - allTodayTrips.length;
      pastTripsOnPage = allPastTrips.slice(
        pastStartIndex,
        pastStartIndex + tripsPerPage
      );
    }

    return {
      todayTrips: todayTripsOnPage,
      pastTrips: pastTripsOnPage,
      totalPages: Math.ceil(
        (allTodayTrips.length + allPastTrips.length) / tripsPerPage
      ),
    };
  }, [tripList, page, tripsPerPage]);
};
