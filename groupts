import { TripData, GroupedTrips } from './types';

export function groupTripsByDate(trips: TripData[]): GroupedTrips {
  const today = new Date().toDateString();
  const sevenDaysAgo = new Date();
  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

  return trips.reduce((acc: GroupedTrips, trip) => {
    const tripDate = new Date(trip.date);
    if (tripDate.toDateString() === today) {
      acc.today.push(trip);
    } else if (tripDate >= sevenDaysAgo) {
      acc.past7Days.push(trip);
    }
    return acc;
  }, { today: [], past7Days: [] });
}

export function searchTrips(trips: TripData[], query: string): TripData[] {
  const lowercaseQuery = query.toLowerCase();
  return trips.filter(trip => 
    trip.tripId.toLowerCase().includes(lowercaseQuery) ||
    trip.orders.some(order => 
      order.orderId.toLowerCase().includes(lowercaseQuery) ||
      order.customerName.toLowerCase().includes(lowercaseQuery)
    )
  );
}





import React from 'react';
import { Typography } from '@mui/material';
import TripAccordion from './TripAccordion';
import { TripData } from '../types';

interface TripGroupProps {
  title: string;
  trips: TripData[];
  onOrderSelect: (orderId: string) => void;
  selectedOrderId: string | null;
}

const TripGroup: React.FC<TripGroupProps> = ({ title, trips, onOrderSelect, selectedOrderId }) => {
  if (trips.length === 0) return null;

  return (
    <div className="mb-4">
      <Typography variant="h6" className="mb-2">{title}</Typography>
      {trips.map((trip, index) => (
        <TripAccordion 
          key={trip.tripId} 
          trip={trip} 
          onOrderSelect={onOrderSelect}
          selectedOrderId={selectedOrderId}
          defaultExpanded={index === 0}
        />
      ))}
    </div>
  );
};

export default TripGroup;
