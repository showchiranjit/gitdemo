import React, { useState, useEffect, useCallback } from 'react';
import { GoogleMap, useJsApiLoader, Marker, Circle, Polyline } from '@react-google-maps/api';

const GEOFENCE_RADIUS = 500; // 500 meters

const DriverLocationMap = ({ driverLocation, pickupLocation, deliveryLocation, route }) => {
  const { isLoaded } = useJsApiLoader({
    id: 'google-map-script',
    googleMapsApiKey: 'YOUR_API_KEY_HERE',
    libraries: ['geometry']
  });

  const [map, setMap] = useState(null);
  const [lastUpdated, setLastUpdated] = useState(new Date());
  const [isDriverInPickupZone, setIsDriverInPickupZone] = useState(false);
  const [isDriverInDeliveryZone, setIsDriverInDeliveryZone] = useState(false);

  const onLoad = useCallback((map) => {
    const bounds = new window.google.maps.LatLngBounds();
    bounds.extend(driverLocation);
    bounds.extend(pickupLocation);
    bounds.extend(deliveryLocation);
    map.fitBounds(bounds);
    setMap(map);
  }, [driverLocation, pickupLocation, deliveryLocation]);

  useEffect(() => {
    if (isLoaded) {
      const checkDriverZone = () => {
        const distanceToPickup = window.google.maps.geometry.spherical.computeDistanceBetween(
          new window.google.maps.LatLng(driverLocation.lat, driverLocation.lng),
          new window.google.maps.LatLng(pickupLocation.lat, pickupLocation.lng)
        );
        const distanceToDelivery = window.google.maps.geometry.spherical.computeDistanceBetween(
          new window.google.maps.LatLng(driverLocation.lat, driverLocation.lng),
          new window.google.maps.LatLng(deliveryLocation.lat, deliveryLocation.lng)
        );

        setIsDriverInPickupZone(distanceToPickup <= GEOFENCE_RADIUS);
        setIsDriverInDeliveryZone(distanceToDelivery <= GEOFENCE_RADIUS);
      };

      checkDriverZone();
      const interval = setInterval(() => {
        // Fetch updated driver location here
        checkDriverZone();
        setLastUpdated(new Date());
      }, 30000); // Update every 30 seconds

      return () => clearInterval(interval);
    }
  }, [isLoaded, driverLocation, pickupLocation, deliveryLocation]);

  const refreshMap = () => {
    // Fetch updated data and refresh map
    setLastUpdated(new Date());
    // Re-check driver zone after refresh
    if (isLoaded) {
      const distanceToPickup = window.google.maps.geometry.spherical.computeDistanceBetween(
        new window.google.maps.LatLng(driverLocation.lat, driverLocation.lng),
        new window.google.maps.LatLng(pickupLocation.lat, pickupLocation.lng)
      );
      const distanceToDelivery = window.google.maps.geometry.spherical.computeDistanceBetween(
        new window.google.maps.LatLng(driverLocation.lat, driverLocation.lng),
        new window.google.maps.LatLng(deliveryLocation.lat, deliveryLocation.lng)
      );

      setIsDriverInPickupZone(distanceToPickup <= GEOFENCE_RADIUS);
      setIsDriverInDeliveryZone(distanceToDelivery <= GEOFENCE_RADIUS);
    }
  };

  if (!isLoaded) return <div>Loading...</div>;

  return (
    <div className="relative w-full h-[600px]">
      <GoogleMap
        mapContainerClassName="w-full h-full"
        center={driverLocation}
        zoom={12}
        onLoad={onLoad}
      >
        {/* Driver Marker */}
        <Marker
          position={driverLocation}
          icon={{
            url: '/car-icon.png',
            scaledSize: new window.google.maps.Size(40, 40)
          }}
        />

        {/* Pickup and Delivery Markers */}
        <Marker position={pickupLocation} icon={{ url: '/pickup-icon.png' }} />
        <Marker position={deliveryLocation} icon={{ url: '/delivery-icon.png' }} />

        {/* Geofencing Circles */}
        <Circle
          center={pickupLocation}
          radius={GEOFENCE_RADIUS}
          options={{
            fillColor: isDriverInPickupZone ? 'green' : 'red',
            fillOpacity: 0.2,
            strokeColor: isDriverInPickupZone ? 'green' : 'red',
            strokeOpacity: 0.8,
            strokeWeight: 2,
          }}
        />
        <Circle
          center={deliveryLocation}
          radius={GEOFENCE_RADIUS}
          options={{
            fillColor: isDriverInDeliveryZone ? 'green' : 'red',
            fillOpacity: 0.2,
            strokeColor: isDriverInDeliveryZone ? 'green' : 'red',
            strokeOpacity: 0.8,
            strokeWeight: 2,
          }}
        />

        {/* Driver's Route */}
        <Polyline
          path={route}
          options={{
            strokeColor: '#0000FF',
            strokeOpacity: 0.8,
            strokeWeight: 2,
          }}
        />
      </GoogleMap>

      {/* Refresh Button and Last Updated Time */}
      <div className="absolute bottom-4 left-4 bg-white p-2 rounded shadow">
        <button
          onClick={refreshMap}
          className="bg-blue-500 text-white px-4 py-2 rounded mr-2"
        >
          Refresh Map
        </button>
        <span className="text-sm text-gray-600">
          Last updated: {lastUpdated.toLocaleTimeString()}
        </span>
      </div>
    </div>
  );
};

export default DriverLocationMap;



const route = [
  { lat: 30.224090, lng: -92.019843 }, // Starting point (e.g., pickup location)
  { lat: 30.223756, lng: -92.018684 },
  { lat: 30.223422, lng: -92.017525 },
  { lat: 30.223088, lng: -92.016366 },
  { lat: 30.222754, lng: -92.015207 },
  { lat: 30.222420, lng: -92.014048 },
  { lat: 30.222086, lng: -92.012889 },
  { lat: 30.221752, lng: -92.011730 },
  { lat: 30.221418, lng: -92.010571 },
  { lat: 30.221084, lng: -92.009412 }, // Ending point (e.g., delivery location)
];



const createSimpleRoute = (start, end, steps = 10) => {
  const route = [];
  for (let i = 0; i <= steps; i++) {
    const lat = start.lat + (end.lat - start.lat) * (i / steps);
    const lng = start.lng + (end.lng - start.lng) * (i / steps);
    route.push({ lat, lng });
  }
  return route;
};

// Usage
const route = createSimpleRoute(pickupLocation, deliveryLocation);



import React from 'react';
import DriverLocationMap from './DriverLocationMap';

const MapContainer = () => {
  // Driver's current location (blue marker on the map)
  const currentDriverLocation = { lat: 30.2165, lng: -92.0208 };

  // Pickup location (assuming it's where the route starts)
  const pickupCoordinates = { lat: 30.2148, lng: -92.0230 };

  // Delivery location (assuming it's where the route ends)
  const deliveryCoordinates = { lat: 30.2240, lng: -92.0086 };

  // Simple route between pickup and delivery
  const route = [
    pickupCoordinates,
    { lat: 30.2156, lng: -92.0220 },
    { lat: 30.2165, lng: -92.0208 }, // Driver's current location
    { lat: 30.2180, lng: -92.0180 },
    { lat: 30.2200, lng: -92.0150 },
    { lat: 30.2220, lng: -92.0120 },
    deliveryCoordinates
  ];

  return (
    <DriverLocationMap
      driverLocation={currentDriverLocation}
      pickupLocation={pickupCoordinates}
      deliveryLocation={deliveryCoordinates}
      route={route}
    />
  );
};

export default MapContainer;
