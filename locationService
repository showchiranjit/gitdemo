import React, { useState, useCallback, useEffect } from 'react';
import { GoogleMap, useJsApiLoader, Marker, Circle, DirectionsRenderer } from '@react-google-maps/api';

const center = { lat: 40.7128, lng: -74.0060 }; // New York City
const geofenceRadius = 5000; // 5km radius

function App() {
  const { isLoaded, loadError } = useJsApiLoader({
    id: 'google-map-script',
    googleMapsApiKey: "YOUR_API_KEY_HERE",
    libraries: ["geometry", "places"]
  });

  const [map, setMap] = useState(null);
  const [driverPosition, setDriverPosition] = useState(center);
  const [pickupPosition, setPickupPosition] = useState({ lat: 40.7282, lng: -73.7949 }); // Example: JFK Airport
  const [directions, setDirections] = useState(null);
  const [isWithinGeofence, setIsWithinGeofence] = useState(false);

  const onLoad = useCallback(function callback(map) {
    setMap(map);
  }, []);

  const onUnmount = useCallback(function callback(map) {
    setMap(null);
  }, []);

  useEffect(() => {
    if (isLoaded && window.google) {
      const directionsService = new window.google.maps.DirectionsService();
      directionsService.route(
        {
          origin: driverPosition,
          destination: pickupPosition,
          travelMode: window.google.maps.TravelMode.DRIVING,
        },
        (result, status) => {
          if (status === window.google.maps.DirectionsStatus.OK) {
            setDirections(result);
          }
        }
      );

      // Check if driver is within geofence
      const distance = window.google.maps.geometry.spherical.computeDistanceBetween(
        new window.google.maps.LatLng(driverPosition),
        new window.google.maps.LatLng(center)
      );
      setIsWithinGeofence(distance <= geofenceRadius);
    }
  }, [isLoaded, driverPosition, pickupPosition]);

  // Simulating driver movement (replace with actual API polling)
  useEffect(() => {
    const interval = setInterval(() => {
      setDriverPosition(prevPos => ({
        lat: prevPos.lat + (Math.random() - 0.5) * 0.01,
        lng: prevPos.lng + (Math.random() - 0.5) * 0.01,
      }));
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  if (loadError) {
    return <div>Map cannot be loaded right now, sorry.</div>
  }

  return isLoaded ? (
    <GoogleMap
      mapContainerStyle={{ width: '100%', height: '400px' }}
      center={center}
      zoom={10}
      onLoad={onLoad}
      onUnmount={onUnmount}
    >
      <Marker position={driverPosition} icon="path/to/car-icon.png" />
      <Marker position={pickupPosition} />
      <Circle
        center={center}
        radius={geofenceRadius}
        options={{
          fillColor: isWithinGeofence ? 'green' : 'red',
          fillOpacity: 0.3,
          strokeColor: isWithinGeofence ? 'green' : 'red',
          strokeOpacity: 0.8,
          strokeWeight: 2,
        }}
      />
      {directions && <DirectionsRenderer directions={directions} />}
    </GoogleMap>
  ) : <div>Loading...</div>
}

export default App;








import React, { useState, useEffect, useCallback } from 'react';
import { GoogleMap, useJsApiLoader, Marker, Circle, Polyline } from '@react-google-maps/api';

const DriverLocationMap = ({ driverLocation, pickupLocation, deliveryLocation, route }) => {
  const { isLoaded } = useJsApiLoader({
    id: 'google-map-script',
    googleMapsApiKey: 'YOUR_API_KEY_HERE'
  });

  const [map, setMap] = useState(null);
  const [lastUpdated, setLastUpdated] = useState(new Date());

  const onLoad = useCallback((map) => {
    const bounds = new window.google.maps.LatLngBounds();
    bounds.extend(driverLocation);
    bounds.extend(pickupLocation);
    bounds.extend(deliveryLocation);
    map.fitBounds(bounds);
    setMap(map);
  }, [driverLocation, pickupLocation, deliveryLocation]);

  useEffect(() => {
    const interval = setInterval(() => {
      // Fetch updated driver location here
      setLastUpdated(new Date());
    }, 30000); // Update every 30 seconds

    return () => clearInterval(interval);
  }, []);

  const refreshMap = () => {
    // Fetch updated data and refresh map
    setLastUpdated(new Date());
  };

  if (!isLoaded) return <div>Loading...</div>;

  return (
    <div className="relative w-full h-[600px]">
      <GoogleMap
        mapContainerClassName="w-full h-full"
        center={driverLocation}
        zoom={12}
        onLoad={onLoad}
      >
        {/* Driver Marker */}
        <Marker
          position={driverLocation}
          icon={{
            url: '/car-icon.png',
            scaledSize: new window.google.maps.Size(40, 40)
          }}
        />

        {/* Pickup and Delivery Markers */}
        <Marker position={pickupLocation} icon={{ url: '/pickup-icon.png' }} />
        <Marker position={deliveryLocation} icon={{ url: '/delivery-icon.png' }} />

        {/* Geofencing Circles */}
        <Circle
          center={pickupLocation}
          radius={500}
          options={{
            fillColor: isDriverInPickupZone ? 'green' : 'red',
            fillOpacity: 0.2,
            strokeColor: isDriverInPickupZone ? 'green' : 'red',
            strokeOpacity: 0.8,
            strokeWeight: 2,
          }}
        />
        <Circle
          center={deliveryLocation}
          radius={500}
          options={{
            fillColor: isDriverInDeliveryZone ? 'green' : 'red',
            fillOpacity: 0.2,
            strokeColor: isDriverInDeliveryZone ? 'green' : 'red',
            strokeOpacity: 0.8,
            strokeWeight: 2,
          }}
        />

        {/* Driver's Route */}
        <Polyline
          path={route}
          options={{
            strokeColor: '#0000FF',
            strokeOpacity: 0.8,
            strokeWeight: 2,
          }}
        />
      </GoogleMap>

      {/* Refresh Button and Last Updated Time */}
      <div className="absolute bottom-4 left-4 bg-white p-2 rounded shadow">
        <button
          onClick={refreshMap}
          className="bg-blue-500 text-white px-4 py-2 rounded mr-2"
        >
          Refresh Map
        </button>
        <span className="text-sm text-gray-600">
          Last updated: {lastUpdated.toLocaleTimeString()}
        </span>
      </div>
    </div>
  );
};

export default DriverLocationMap;
