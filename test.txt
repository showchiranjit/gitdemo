


import moment from "moment";

export const sortTripsByStartDateTime = (trips) => {
  return [...trips].sort((a, b) => {
    const dateA = moment(a.tripStartDateTime);
    const dateB = moment(b.tripStartDateTime);
    return dateB.diff(dateA);
  });
};

export const sortOrdersByCustomerStartTime = (orders) => {
  return [...orders].sort((a, b) => {
    const dateA = moment(a.customerStartTime);
    const dateB = moment(b.customerStartTime);
    return dateB.diff(dateA);
  });
};

export const groupAndSortDeliveryTasks = (deliveryTasks) => {
  // Flatten the tasks array
  const sortingOrder = [];
  const allTasks = sortOrdersByCustomerStartTime(
    Object.values(deliveryTasks).flat()
  );

  // Group tasks by storeId
  const groupedTasks = allTasks.reduce((acc, task) => {
    const storeId = task.storeId.toString();
    if (!acc[storeId]) {
      acc[storeId] = [];
      sortingOrder.push(storeId);
    }
    acc[storeId].push(task);
    return acc;
  }, {});

  // Sort tasks within each store group
  //   Object.keys(groupedTasks).forEach((storeId) => {
  //     groupedTasks[storeId].sort((a, b) => {
  //       const dateA = moment(a.customerStartTime);
  //       const dateB = moment(b.customerStartTime);
  //       return dateB.diff(dateA);
  //     });
  //   });

  return { groupedTasks, sortingOrder };
};

export const sortTripsAndGroupTasks = (trips) => {
  const sortedTrips = sortTripsByStartDateTime(trips);
  return sortedTrips.map((trip) => ({
    ...trip,
    deliveryTasksByStoreId: groupAndSortDeliveryTasks(
      trip.deliveryTasksByTenantId
    ).groupedTasks,
    deliveryTasksSortingOrder: groupAndSortDeliveryTasks(
      trip.deliveryTasksByTenantId
    ).sortingOrder,
  }));
};

/////////////////////////////////////







import moment from "moment";

// Define types
interface CustomerInfo {
  customerFullName: string;
  // Add other customer info fields as needed
}

interface DeliveryTask {
  id: string;
  storeId: number;
  orderId: string;
  customerStartTime: number;
  customerEndTime: number;
  deliveryStatus: string;
  customerInfo: CustomerInfo;
  // Add other delivery task fields as needed
}

interface Trip {
  tripId: string;
  tripStartDateTime: number;
  tripEndDateTime: number;
  deliveryTasksByTenantId: { [key: string]: DeliveryTask[] };
  // Add other trip fields as needed
}

interface GroupedTasks {
  [storeId: string]: DeliveryTask[];
}

interface GroupAndSortResult {
  groupedTasks: GroupedTasks;
  sortingOrder: string[];
}

interface SortedTrip extends Omit<Trip, 'deliveryTasksByTenantId'> {
  deliveryTasksByStoreId: GroupedTasks;
  deliveryTasksSortingOrder: string[];
}

// Utility functions
export const sortTripsByStartDateTime = (trips: Trip[]): Trip[] => {
  return [...trips].sort((a, b) => {
    const dateA = moment(a.tripStartDateTime);
    const dateB = moment(b.tripStartDateTime);
    return dateB.diff(dateA);
  });
};

export const sortOrdersByCustomerStartTime = (orders: DeliveryTask[]): DeliveryTask[] => {
  return [...orders].sort((a, b) => {
    const dateA = moment(a.customerStartTime);
    const dateB = moment(b.customerStartTime);
    return dateB.diff(dateA);
  });
};

export const groupAndSortDeliveryTasks = (deliveryTasks: { [key: string]: DeliveryTask[] }): GroupAndSortResult => {
  const sortingOrder: string[] = [];
  const allTasks = sortOrdersByCustomerStartTime(
    Object.values(deliveryTasks).flat()
  );

  const groupedTasks = allTasks.reduce<GroupedTasks>((acc, task) => {
    const storeId = task.storeId.toString();
    if (!acc[storeId]) {
      acc[storeId] = [];
      sortingOrder.push(storeId);
    }
    acc[storeId].push(task);
    return acc;
  }, {});

  return { groupedTasks, sortingOrder };
};

export const sortTripsAndGroupTasks = (trips: Trip[]): SortedTrip[] => {
  const sortedTrips = sortTripsByStartDateTime(trips);
  return sortedTrips.map((trip) => {
    const { groupedTasks, sortingOrder } = groupAndSortDeliveryTasks(
      trip.deliveryTasksByTenantId
    );
    return {
      ...trip,
      deliveryTasksByStoreId: groupedTasks,
      deliveryTasksSortingOrder: sortingOrder,
    };
  });
};
