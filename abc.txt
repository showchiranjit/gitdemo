import React from "react";
import { render, fireEvent } from "@testing-library/react";
import DriverAssitance from "./DriverAssitance";

describe("DriverAssitance Component", () => {
  const mockActionHandler = jest.fn();

  afterEach(() => {
    jest.clearAllMocks();
  });

  test("renders button with 'Procced' text", () => {
    const { getByText } = render(
      <DriverAssitance actionhandler={mockActionHandler} isDisabled={false} />
    );
    expect(getByText("Procced")).toBeInTheDocument();
  });

  test("button is disabled when isDisabled is true", () => {
    const { getByRole } = render(
      <DriverAssitance actionhandler={mockActionHandler} isDisabled={true} />
    );
    const button = getByRole("button");
    expect(button).toBeDisabled();
  });

  test("button is enabled when isDisabled is false", () => {
    const { getByRole } = render(
      <DriverAssitance actionhandler={mockActionHandler} isDisabled={false} />
    );
    const button = getByRole("button");
    expect(button).toBeEnabled();
  });

  test("calls actionhandler when button is clicked", () => {
    const { getByRole } = render(
      <DriverAssitance actionhandler={mockActionHandler} isDisabled={false} />
    );
    const button = getByRole("button");
    fireEvent.click(button);
    expect(mockActionHandler).toHaveBeenCalledTimes(1);
  });

  test("does not call actionhandler when button is disabled", () => {
    const { getByRole } = render(
      <DriverAssitance actionhandler={mockActionHandler} isDisabled={true} />
    );
    const button = getByRole("button");
    fireEvent.click(button);
    expect(mockActionHandler).not.toHaveBeenCalled();
  });
});
