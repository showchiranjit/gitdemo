import { setCurrentCustomer, resetCurrentCustomer, getCustomerDataFromOrderLookup, customerSearch } from './your-module';
import { OrderLookupService } from '../../services';
import { CustomerSearchService } from './../services/customer';
import { CURRENT_CUSTOMER } from './action-types';
import { customerInitialState } from '../initial-state';

// Mock the services
jest.mock('../../services', () => ({
  OrderLookupService: jest.fn(),
}));

jest.mock('./../services/customer', () => ({
  CustomerSearchService: jest.fn(),
}));

describe('Customer Actions', () => {
  
  describe('setCurrentCustomer', () => {
    it('should create an action to set the current customer', () => {
      const data = { id: 1, name: 'John Doe' };
      const expectedAction = {
        type: CURRENT_CUSTOMER,
        data,
      };
      expect(setCurrentCustomer(data)).toEqual(expectedAction);
    });
  });

  describe('resetCurrentCustomer', () => {
    it('should create an action to reset the current customer', () => {
      const expectedAction = {
        type: CURRENT_CUSTOMER,
        data: customerInitialState,
      };
      expect(resetCurrentCustomer()).toEqual(expectedAction);
    });
  });

  describe('getCustomerDataFromOrderLookup', () => {
    it('should return customer data on successful API call', async () => {
      const mockResponse = {
        customerSearchResponse: [{ id: 1, name: 'John Doe' }],
      };
      OrderLookupService.mockResolvedValue(mockResponse);
      const data = await getCustomerDataFromOrderLookup('123');
      expect(data).toEqual({
        showMultipleProfiles: false,
        customerData: mockResponse.customerSearchResponse[0],
      });
    });

    it('should throw an error on API failure', async () => {
      const mockError = new Error('API failure');
      OrderLookupService.mockRejectedValue(mockError);
      await expect(getCustomerDataFromOrderLookup('123')).rejects.toThrow('API failure');
    });
  });

  describe('customerSearch', () => {
    it('should return customer data on successful search', async () => {
      const mockResponse = {
        customerSearchResponse: [{ id: 1, name: 'John Doe' }],
      };
      CustomerSearchService.mockResolvedValue(mockResponse);
      const data = await customerSearch('John');
      expect(data).toEqual({
        showMultipleProfiles: true,
        customerData: mockResponse.customerSearchResponse,
      });
    });

    it('should throw an error on search failure', async () => {
      const mockError = new Error('Search failure');
      CustomerSearchService.mockRejectedValue(mockError);
      await expect(customerSearch('John')).rejects.toThrow('Search failure');
    });
  });
});
