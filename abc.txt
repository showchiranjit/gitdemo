import { customerSearchAction } from './yourFile'; // Adjust the path accordingly
import { getCustomerDataFromOrderLookup, customerSearch } from './services'; // Mock your service functions

jest.mock('./services', () => ({
  getCustomerDataFromOrderLookup: jest.fn(),
  customerSearch: jest.fn(),
}));

describe('customerSearchAction', () => {
  const incident = {
    customer: {
      firstName: 'John',
      lastName: 'Doe',
      email: 'john.doe@example.com',
      phone: '1234567890',
    },
  };

  it('should return customer data using order lookup if orderNo is provided', async () => {
    const orderNo = '12345';
    (getCustomerDataFromOrderLookup as jest.Mock).mockResolvedValue('mockCustomerData');

    const result = await customerSearchAction(incident, orderNo);
    expect(getCustomerDataFromOrderLookup).toHaveBeenCalledWith(orderNo);
    expect(result).toBe('mockCustomerData');
  });

  it('should use email for customer search when orderNo is not provided', async () => {
    const orderNo = '';
    (customerSearch as jest.Mock).mockResolvedValue('mockSearchResult');

    const result = await customerSearchAction(incident, orderNo);
    expect(customerSearch).toHaveBeenCalledWith('john.doe@example.com');
    expect(result).toBe('mockSearchResult');
  });

  it('should use phone for customer search if email is not provided', async () => {
    const modifiedIncident = {
      customer: {
        firstName: 'John',
        lastName: 'Doe',
        email: '',
        phone: '1234567890',
      },
    };
    const orderNo = '';
    (customerSearch as jest.Mock).mockResolvedValue('mockSearchResult');

    const result = await customerSearchAction(modifiedIncident, orderNo);
    expect(customerSearch).toHaveBeenCalledWith('1234567890');
    expect(result).toBe('mockSearchResult');
  });

  it('should use firstName and lastName for customer search if neither email nor phone are provided', async () => {
    const modifiedIncident = {
      customer: {
        firstName: 'John',
        lastName: 'Doe',
        email: '',
        phone: '',
      },
    };
    const orderNo = '';
    (customerSearch as jest.Mock).mockResolvedValue('mockSearchResult');

    const result = await customerSearchAction(modifiedIncident, orderNo);
    expect(customerSearch).toHaveBeenCalledWith('John Doe');
    expect(result).toBe('mockSearchResult');
  });

  it('should resolve with null if no search criteria is found', async () => {
    const modifiedIncident = {
      customer: {
        firstName: '',
        lastName: '',
        email: '',
        phone: '',
      },
    };
    const orderNo = '';

    const result = await customerSearchAction(modifiedIncident, orderNo);
    expect(result).toBeNull();
  });
});


import { setStoreACCCustomer } from './yourFile'; // Adjust the path accordingly
import { SET_STORE_ACC_CUSTOMER } from './actionTypes'; // Import your action type

describe('setStoreACCCustomer', () => {
  it('should dispatch action with correct type and customer data', () => {
    const dispatch = jest.fn();
    const accCustomer = { id: 1, name: 'John Doe' };

    setStoreACCCustomer(dispatch, accCustomer);

    expect(dispatch).toHaveBeenCalledWith({
      type: SET_STORE_ACC_CUSTOMER,
      data: accCustomer,
    });
  });
});











