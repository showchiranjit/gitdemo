import React, { useState } from "react";
import {
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Radio,
  Button,
  TextField,
  InputAdornment,
} from "@mui/material";
import { ExpandMore, Search, LocationOn } from "@mui/icons-material";

const mockData = [
  {
    tripId: "160",
    orders: 4,
    date: "Aug 25, 2024",
    timeRange: "8:00 AM - 9:00 PM CDT",
    status: "Trip in progress",
    orderDetails: [
      {
        name: "Kathleen Doe",
        orderId: "2304902394023",
        time: "3:15 PM - 5:00 PM",
        status: "Delivery in progress",
      },
      {
        name: "James Liu",
        orderId: "8389023984023",
        time: "2:15 PM - 3:00 PM",
        status: "Cancelled",
      },
      {
        name: "Dora Amana",
        orderId: "191991324323423",
        time: "1:15 PM - 2:00 PM",
        status: "Delivery in progress",
      },
    ],
    pickupLocation: {
      name: "Walmart BENBROOK #4949",
      time: "1:30 PM - 2:00 PM",
      address: "6675 BUSINESS CENTER DR, HIGHLANDS RANCH, CO 80130-3603",
    },
  },

  {
    tripId: "170",
    orders: 4,
    date: "Aug 25, 2024",
    timeRange: "8:00 AM - 9:00 PM CDT",
    status: "Trip in progress",
    orderDetails: [
      {
        name: "Kathleen Doe",
        orderId: "2304902394024",
        time: "3:15 PM - 5:00 PM",
        status: "Delivery in progress",
      },
      {
        name: "James Liu",
        orderId: "8389023984024",
        time: "2:15 PM - 3:00 PM",
        status: "Cancelled",
      },
      {
        name: "Dora Amana",
        orderId: "191991324323453",
        time: "1:15 PM - 2:00 PM",
        status: "Delivery in progress",
      },
    ],
    pickupLocation: {
      name: "Walmart BENBROOK #4949",
      time: "1:30 PM - 2:00 PM",
      address: "6675 BUSINESS CENTER DR, HIGHLANDS RANCH, CO 80130-3603",
    },
  },
];

const TripSelector = ({ selectionMode = "trip" }) => {
  const [searchQuery, setSearchQuery] = useState("");
  const [expandedTrip, setExpandedTrip] = useState(mockData[0].tripId);
  const [selectedTrip, setSelectedTrip] = useState(null);
  const [selectedOrder, setSelectedOrder] = useState(null);

  const handleSearch = () => {
    // Implement search functionality here
    console.log("Searching for:", searchQuery);
  };

  const handleExpand = (tripId) => {
    setExpandedTrip(tripId === expandedTrip ? null : tripId);
  };

  const handleTripSelection = (tripId) => {
    setSelectedTrip(tripId);
    setSelectedOrder(null); // Clear order selection when a trip is selected
  };

  const handleOrderSelection = (orderId) => {
    setSelectedOrder(orderId);
  };

  return (
    <div className="max-w-4xl mx-auto p-4">
      <h1 className="text-2xl font-semibold mb-4">
        Select the {selectionMode === "trip" ? "trip" : "order"} the driver
        needs help with
      </h1>
      <div className="flex mb-4">
        <TextField
          fullWidth
          variant="outlined"
          placeholder={`Search using ${
            selectionMode === "trip" ? "trip#" : "order #"
          }, customer name, or ${
            selectionMode === "trip" ? "order number" : "trip number"
          }`}
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <Search />
              </InputAdornment>
            ),
          }}
        />
        <Button variant="outlined" className="ml-2" onClick={handleSearch}>
          Search
        </Button>
      </div>
      {mockData.map((trip) => (
        <Accordion
          key={trip.tripId}
          expanded={expandedTrip === trip.tripId}
          onChange={() => handleExpand(trip.tripId)}
          className="mb-2"
        >
          <AccordionSummary expandIcon={<ExpandMore />}>
            <div className="flex items-center w-full">
              {selectionMode === "trip" && (
                <Radio
                  checked={selectedTrip === trip.tripId}
                  onChange={() => handleTripSelection(trip.tripId)}
                />
              )}
              <div className="flex-grow">
                <span className="font-semibold">Trip #{trip.tripId}</span> |{" "}
                {trip.orders} orders | {trip.date} | {trip.timeRange}
              </div>
              <span className="text-sm text-gray-600">{trip.status}</span>
            </div>
          </AccordionSummary>
          <AccordionDetails>
            {trip.orderDetails.map((order) => (
              <div key={order.orderId} className="flex items-center mb-2">
                {selectionMode === "order" && (
                  <Radio
                    checked={selectedOrder === order.orderId}
                    onChange={() => handleOrderSelection(order.orderId)}
                  />
                )}
                <div className="flex-grow">
                  <div className="font-semibold">
                    {order.name} | Order #{order.orderId} | {order.time}
                  </div>
                </div>
                <span className="text-sm text-gray-600">{order.status}</span>
              </div>
            ))}
            <div className="mt-4">
              <div className="flex items-center">
                <span className="font-semibold">
                  {trip.pickupLocation.name} | {trip.pickupLocation.time}
                </span>
              </div>
              <div className="ml-10 flex items-start">
                <LocationOn className="text-gray-500 mr-1 mt-1" />
                <span>{trip.pickupLocation.address}</span>
              </div>
              <div className="text-sm text-gray-600 ml-10 mt-1">
                Pickup location
              </div>
            </div>
          </AccordionDetails>
        </Accordion>
      ))}
      <Button variant="contained" color="primary" className="mt-4">
        Proceed
      </Button>
    </div>
  );
};

export default TripSelector;
